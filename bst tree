#include <iostream>
#include <queue>
using namespace std;

class TreeNode {
public:
    int value;
    TreeNode *left, *right;
    TreeNode(int key) : value(key), left(nullptr), right(nullptr) {}
};

class BST {
public:
    TreeNode *root;
    BST() : root(nullptr) {}

    void insert(int key) {
        root = insert(root, key);
    }

    void printLevelOrder() {
        if (!root) return;
        queue<TreeNode*> q;
        q.push(root);
        while (!q.empty()) {
            int levelSize = q.size();
            while (levelSize--) {
                TreeNode *node = q.front();
                q.pop();
                cout << node->value << " ";
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }
            cout << endl;
        }
    }

    int findHeight() {
        return findHeight(root);
    }

    void printLeafNodes() {
        printLeafNodes(root);
        cout << endl;
    }

private:
    TreeNode* insert(TreeNode *node, int key) {
        if (!node) return new TreeNode(key);
        if (key < node->value)
            node->left = insert(node->left, key);
        else
            node->right = insert(node->right, key);
        return node;
    }

    int findHeight(TreeNode *node) {
        if (!node) return -1;
        int leftHeight = findHeight(node->left);
        int rightHeight = findHeight(node->right);
        return max(leftHeight, rightHeight) + 1;
    }

    void printLeafNodes(TreeNode *node) {
        if (!node) return;
        if (!node->left && !node->right) {
            cout << node->value << " ";
        }
        printLeafNodes(node->left);
        printLeafNodes(node->right);
    }
};
int main() {
   
    BST original;
    int originalValues[] = {10, 5, 15, 2, 7, 12, 20};
    for (int value : originalValues) {
        original.insert(value);
    }

    cout << "Original BST Level Order:" << endl;
    original.printLevelOrder();

  
    BST newTree;
    int newValues[] = {25, 18, 30, 15, 20, 28, 35};
    for (int value : newValues) {
        newTree.insert(value);
    }

    cout << "\nNew BST Level Order:" << endl;
    newTree.printLevelOrder();

    // Find heights
    cout << "\nOriginal BST Height: " << original.findHeight() << endl;
    cout << "New BST Height: " << newTree.findHeight() << endl;

    // Print leaf nodes
    cout << "\nOriginal BST Leaf Nodes:" << endl;
    original.printLeafNodes();

    cout << "New BST Leaf Nodes:" << endl;
    newTree.printLeafNodes();

    return 0;
}
